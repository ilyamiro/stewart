from pathlib import Path
import subprocess
import re
import logging

from pyrogram import Client, filters

PROJECT_FOLDER = Path(__file__).resolve().parent.parent.parent
CHANNEL = "@stewart_github"


def replace_repeated_chars(input_string, char):
    pattern = f"{re.escape(char)}+"
    result = re.sub(pattern, char, input_string)
    return result


def find_semantic(text):
    pattern = r'v(\d+\.\d+\.\d+)'
    match = re.search(pattern, text)
    if match:
        return match.group()
    else:
        with open(f"{PROJECT_FOLDER}/version.txt", "r", encoding="utf-8") as file:
            return "v" + file.read()


COMMIT_MSG = subprocess.run(['git', 'log', "-1", "--pretty=%B"], capture_output=True, text=True).stdout

if COMMIT_MSG.startswith("v"):
    COMMIT_HASH = subprocess.run(['git', 'log', "-1", "--pretty=%H"], capture_output=True, text=True).stdout.replace("\n", "")
    COMMIT_DATE = subprocess.run(['git', 'log', "-1", "--pretty=%ad", "--date=iso"], capture_output=True, text=True).stdout.replace("\n", "")
    COMMIT_AUTHOR = subprocess.run(['git', 'log', "-1", "--pretty=%an"], capture_output=True, text=True).stdout.replace("\n", "")

    COMMIT_LINK = f"**[Link to the commit](https://github.com/ilyamiro/stewart/commit/{COMMIT_HASH})**"
    COMMIT_BRANCH = subprocess.run(["git", "rev-parse", "--abbrev-ref", "HEAD"], capture_output=True, text=True).stdout.replace("\n", "")

    # Get the changes using 'git show' and process it line by line
    raw_changes = subprocess.run(['git', 'show', "--stat", "--pretty=", f"{COMMIT_HASH}"], capture_output=True, text=True).stdout

    # Split the changes by lines and prefix each line with a bullet point
    change_lines = raw_changes.strip().split("\n")
    formatted_changes = "\n".join([f"â€¢ {line.strip()}" for line in change_lines if line.strip()])

    # Apply character replacement if needed (optional step)
    COMMIT_CHANGES = replace_repeated_chars(replace_repeated_chars(replace_repeated_chars(formatted_changes, "+"), "-"), " ")

    TELEGRAM_MSG = f"""**New commit** 

Branch: **{COMMIT_BRANCH}**

Author: **{COMMIT_AUTHOR}**
Date: **{COMMIT_DATE}**

{COMMIT_MSG}
**Changes**

{COMMIT_CHANGES}

{COMMIT_LINK}

__autogenerated message__
    """

    app = Client("post_commit")
    app.start()

    app.send_message(CHANNEL, TELEGRAM_MSG)

