"use strict";(self.webpackChunkstewart=self.webpackChunkstewart||[]).push([[397],{2055:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Getting Started","title":"Getting Started","description":"Package installation","source":"@site/docs/Getting Started.md","sourceDirName":".","slug":"/Getting Started","permalink":"/stewart/docs/Getting Started","draft":false,"unlisted":false,"editUrl":"https://github.com/ilyamiro/stewart/docs/Getting Started.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/stewart/docs/Overview"},"next":{"title":"Configuration","permalink":"/stewart/docs/Configuration"}}');var i=s(4848),r=s(8453);const o={},l=void 0,a={},d=[{value:"Package installation",id:"package-installation",level:3},{value:"Installation",id:"installation",level:3},{value:"Linux",id:"linux",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h3:"h3",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"package-installation",children:"Package installation"}),"\n",(0,i.jsxs)(n.p,{children:["Choose your Linux distribution below to install ",(0,i.jsx)(n.strong,{children:"Git"}),", ",(0,i.jsx)(n.strong,{children:"Python 3.11"}),"."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"\u25b6\ufe0f Ubuntu / Debian"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo add-apt-repository ppa:deadsnakes/ppa -y && sudo apt update && sudo apt install -y git python3.11 mpv libmpv-dev\n"})}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcdd Make sure you run ",(0,i.jsx)(n.code,{children:"python3.11"}),", not ",(0,i.jsx)(n.code,{children:"python3"}),", unless you update the default alternatives."]}),"\n"]}),(0,i.jsx)(n.p,{children:"Ensure MPV is properly linked (required for some Python packages like flet):"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo ln -s /usr/lib/x86_64-linux-gnu/libmpv.so /usr/lib/x86_64-linux-gnu/libmpv.so.1\n"})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"\u25b6\ufe0f Fedora"}),(0,i.jsx)(n.p,{children:"Update first:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo dnf update -y\n"})}),(0,i.jsx)(n.p,{children:"Then install the requirements:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo dnf install -y git python3.11 mpv mpv-devel\n"})}),(0,i.jsx)(n.p,{children:"Ensure MPV is properly linked (required for some Python packages like flet):"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo ln -s /usr/lib64/libmpv.so /usr/lib64/libmpv.so.1\n"})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"\u25b6\ufe0f Arch Linux"}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.code,{children:"python"})," in Arch is usually the latest (e.g., 3.14). Use the AUR for 3.11 specifically."]}),"\n"]}),(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Install via AUR (with ",(0,i.jsx)(n.code,{children:"yay"}),"):"]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"yay -S git python311 mpv libmpv\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Verify:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git --version\npython3.11 --version\n"})}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["\ud83d\udcdd If you don\u2019t have ",(0,i.jsx)(n.code,{children:"yay"}),", install it from AUR manually or via another helper."]}),"\n"]}),(0,i.jsx)(n.p,{children:"Ensure MPV is properly linked (required for some Python packages like flet):"}),(0,i.jsx)(n.p,{children:"sudo ln -s /usr/lib/libmpv.so /usr/lib/libmpv.so.1"})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"\u25b6\ufe0f NixOS"}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Temporary shell:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"nix-shell -p git python311 mpv\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["System-wide (add to ",(0,i.jsx)(n.code,{children:"configuration.nix"}),"):"]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nix",children:"environment.systemPackages = with pkgs; [\n  git\n  python311\n  mpv\n  libmpv\n];\n"})}),(0,i.jsx)(n.p,{children:"Then apply changes:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo nixos-rebuild switch\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Verify:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git --version\npython3.11 --version\n"})})]}),"\n",(0,i.jsxs)(n.p,{children:["These were only some of the most popular distributions. In general, installing ",(0,i.jsx)(n.strong,{children:"git"})," and ",(0,i.jsx)(n.strong,{children:"python3.11"})," is straightforward: just google how to do it for your specific distribution."]}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["Installing ",(0,i.jsx)(n.strong,{children:"Stewart"})," is the easy part. Too easy, maybe. You will only need an installer"]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Just clone the github repository:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/ilyamiro/stewart-installer.git\ncd stewart-installer\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Then install the requirements for python using pip:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python -m venv venv\nsource venv/bin/activate\npython -m ensurepip\npython -m pip install -U pip setuptools wheel\npython -m pip install -r requirements.txt\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{}),(0,i.jsx)(n.p,{children:"The project was built using Python 3.11, and it will be installed. Other versions have not been tested, and some of the libraries Stewart depends on do not yet support newer Python versions such as 3.12, 3.13, and 3.14."})]}),"\n",(0,i.jsx)(n.p,{children:"After it runs succesfully, just launch the installer:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python main.py\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Everything else is intuitive, but remember: it will only run on ",(0,i.jsx)(n.a,{href:"#Linux",children:"Linux"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Installer preview",src:s(4009).A+"",width:"1180",height:"715"})}),"\n",(0,i.jsx)(n.h3,{id:"linux",children:"Linux"}),"\n",(0,i.jsxs)(n.admonition,{type:"danger",children:[(0,i.jsx)(n.mdxAdmonitionTitle,{}),(0,i.jsxs)(n.p,{children:["Please note, that the project was developed EXCLUSIVELY for ",(0,i.jsx)(n.strong,{children:"Linux"})," systems. It will NOT work correctly on ",(0,i.jsx)(n.strong,{children:"Windows"}),". See the note in ",(0,i.jsx)(n.a,{href:"/stewart/docs/Overview",children:"Overview"})," for details."]})]}),"\n",(0,i.jsxs)(n.p,{children:["The best distribution for trying out Stewart is ",(0,i.jsx)(n.strong,{children:"Fedora Workstation 40+"}),", since the development was done with that system in mind. But don\u2019t worry \u2014 it will work on any distribution. The only issue might be with some preconfigured commands that were made for Fedora. Once you change them to match your own distro, everything should work fine."]}),"\n",(0,i.jsxs)(n.p,{children:["As for the ",(0,i.jsx)(n.strong,{children:"Desktop Environment"}),", it doesn't really matter. Like before, once you update the commands and keybinds for your system, Stewart should run without any problems. By default, it\u2019s set up for ",(0,i.jsx)(n.strong,{children:"GNOME"}),", using custom keybinds made by the author ",(0,i.jsx)(n.strong,{children:"(@ilyamiro)"}),", so you might want to change them."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["While Stewart will run under ",(0,i.jsx)(n.strong,{children:"Wayland"})," on your Linux machine, some preconfigured commands may throw errors. ",(0,i.jsx)(n.strong,{children:"X11"})," is recommended, though not required."]})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},4009:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/installer-7298e384cee9100b157b9ffe0bb301ec.png"},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);